Frontend
Q1.
"=>" arrow function are way easier to write and to read then a method with a bind call inside a construcotr.

Q2.
syntax error.


Backend
Q1.
save and insert are very similar, especially if no _id value is passed. However, if an _id key is passed, save() will update the document, while insert() will throw a duplicate key error.

Q2.
function(req, res){
  var timestamps = moment().format('HH:mm:ss')
  console.log(timestamps + ' From routes/index.js')
}

Q3.
const findCar = () => {
	// body of the function
}

const createCar = () => {
  // body of the function
}

The above function can be used in another javascript file using "import keyword".
eg: import * from cars


JavaScript

Q1.
syntax for creatig object with dynamic keys: 
var obj = {
  [myKey]: value,
}


Q2.
function multiplyBy5(number) {
    return number * 5;
}

Pure function - The above function will always return the same result, if we pass the same number. In other words, it’s output doesn’t get effected by any other values / state changes. So we can call “multiplyBy5” function as a Pure function.

Q3.
# first part

function a() {
  const random = Math.random();
  if (random < 0.5) {
    var b = 1;
    b = b + 1;
  } else {
    var b = 2;
    b = b + 1;
  }
  console.log(b);
}
a();

Above program will run without errors


# second part


function a() {
  const random = Math.random();
  if (random < 0.5) {
    let b = 1;
    b = b + 1;
  } else {
    let b = 2;
    b = b + 1;
  }
  console.log(b);
}
a();

Above program will give error as "let" is a keyword that is used to declare a block scoped variable.